name: Update Weather

on:
  schedule:
    - cron: "0 19 * * *" # Runs at 6 AM Sydney time (UTC+11)
  workflow_dispatch:

jobs:
  update-weather:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install requests
          sudo apt-get update && sudo apt-get install -y jq  # Ensure jq is available

      - name: Fetch weather data
        id: weather
        env:
          API_KEY: ${{ secrets.OPENWEATHER_API_KEY }}
        run: |
          CITY="Sydney"
          LAT="-33.8688"
          LON="151.2093"
          WEATHER_URL="http://api.openweathermap.org/data/2.5/forecast?lat=${LAT}&lon=${LON}&appid=${API_KEY}&units=metric"

          # Fetch weather data
          response=$(curl -s "$WEATHER_URL")
          if [[ $(echo "$response" | jq -r '.cod') -ne 200 ]]; then
            echo "Failed to fetch weather data"
            exit 1
          fi

          # Extract the date of the first entry (first day)
          first_date=$(echo "$response" | jq -r '.list[0].dt_txt | split(" ")[0]')

          # Extract the next 6 forecasted times (3-hour intervals) for the first day
          forecast=$(echo "$response" | jq -r --arg first_date "$first_date" '
            [ .list
              | map(select(
                  (.dt_txt | startswith($first_date)) and
                  (.dt_txt | test("06:00:00$|09:00:00$|12:00:00$|15:00:00$|18:00:00$|21:00:00$")
                ))
              | .[:6]
              | map(
                  "\(
                    if .dt_txt[11:16] == "06:00" then "6AM"
                    elif .dt_txt[11:16] == "09:00" then "9AM"
                    elif .dt_txt[11:16] == "12:00" then "12PM"
                    elif .dt_txt[11:16] == "15:00" then "3PM"
                    elif .dt_txt[11:16] == "18:00" then "6PM"
                    elif .dt_txt[11:16] == "21:00" then "9PM"
                    else .dt_txt[11:16] 
                    end
                  ): \( (.main.temp | round) )Â°C, \(.weather[0].description)"
                )
              | join("\n")
            ] | .[0]')

          # Debug: Print the fetched data
          echo "Fetched forecast:"
          echo "$forecast"

          # Store in a temporary file for later usage
          echo "$forecast" > weather.txt

      - name: Update README
        run: |
          # Read weather data from file
          weather_info=$(cat weather.txt)

          # Create the new weather block
          echo -e "<!-- WEATHER:START -->\n\`\`\`\n$weather_info\n\`\`\`\n<!-- WEATHER:END -->" > temp_weather.md

          # Replace the weather block in README.md
          awk '
          BEGIN { inside=0 }
          /<!-- WEATHER:START -->/ { print; system("cat temp_weather.md"); inside=1; next }
          /<!-- WEATHER:END -->/ { inside=0 }
          !inside { print }
          ' README.md > updated_readme.md

          mv updated_readme.md README.md

      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          if git diff --quiet; then
            echo "No changes to commit."
            exit 0
          fi

          git add README.md
          git commit -m "Update weather information"
          git push
